localrules: all

#imports
import sys, pandas as pd, os
sys.path.insert(0, os.path.abspath('./'))
from subscripts.ardetype_utilities import Ardetype_housekeeper as hk

#define sample_id_pattern wildcard and accessing sample_sheet
sip_wild     = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")

#mapping full species name to cgmlstfinder-accepted database format
cgmlst_species_map = {}
for sid, species in zip(sample_sheet['sample_id'], sample_sheet['taxonomy'].str.lower()):
    if 'salmonella' in species:
        cgmlst_species_map[sid] = "salmonella"
    elif 'escherichia coli' in species:
        cgmlst_species_map[sid] = "ecoli"
    elif 'baumannii' in species:
        cgmlst_species_map[sid] = "abaumannii"
    elif 'streptococcus pneumoniae' in species:
        cgmlst_species_map[sid] = "spneumoniae"
    elif 'streptococcus pyogenes' in species:
        cgmlst_species_map[sid] = "streptococcus"


#AGGREGATION RULE
rule all:
    input: 
        config['tip_target_files']
    run:
        print('bact_tip finished')


rule hicap_hinfluenzae:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['hicap_hinfluenzae_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_hi_hicap.tsv'
    shell: #creating empty file just in case to make snakemake not stop if typing has failed for tool-specific reasons
        """
        mkdir -p ~/hicap/
        cp {input.contigs} ~/hicap/
        singularity run {input.sif_file} hicap -q ~/hicap/$(basename {input.contigs}) -o ~/hicap/
        
        if [ -f ~/hicap/{wildcards.sample_id_pattern}.tsv ]; then
            mv ~/hicap/{wildcards.sample_id_pattern}.tsv {output}
        else
            touch {config[output_directory]}{wildcards.sample_id_pattern}_hi_hicap.tsv
        fi

        rm -r ~/hicap/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/hicap/
        """


rule meningotype_nmeningitidis:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['meningotype_nmeningitidis_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_meningotype.tsv'
    shell:
        """
        mkdir -p ~/meningotype/
        cp {input.contigs} ~/meningotype/
        
        singularity run {input.sif_file} meningotype ~/meningotype/$(basename {input.contigs}) > ~/meningotype/$(basename {output})
        
        mv ~/meningotype/$(basename {output}) {output}
        rm -r ~/meningotype/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/meningotype/
        """


rule legsta_lpneumophila:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['legsta_lpneumophila_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_legsta.csv'
    shell:
        """
        mkdir -p ~/legsta/
        cp {input.contigs} ~/legsta/
        
        singularity run {input.sif_file} legsta --csv ~/legsta/$(basename {input.contigs}) >> ~/legsta/$(basename {output})
        
        mv ~/legsta/$(basename {output}) {output}
        rm -r ~/legsta/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/legsta/
        """


rule lpgenomics_lpneumophila:
    input:
        read_1     = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2     = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        repository = config['lpgenomics_repo'],
        pigz_sif   = config['pigz_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+"{sample_id_pattern}-predictResults.txt"
    shell: #script is run from git repository; blank file is created to avoid snakemake failing if typing has failed; lock file is created for each sample under temp to indicate that it is being used
        """
        cd {input.repository}
        mkdir -p lpgenomics_temp/
        chmod 775 lpgenomics_temp/
        cp {input.read_1} lpgenomics_temp/
        cp {input.read_2} lpgenomics_temp/
        
        singularity run {input.pigz_sif} -d lpgenomics_temp/$(basename {input.read_1}) lpgenomics_temp/$(basename {input.read_2})
        R1_FASTQ=lpgenomics_temp/{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq
        R2_FASTQ=lpgenomics_temp/{wildcards.sample_id_pattern}_bact_reads_classified_2.fastq
        
        touch lpgenomics_temp/{wildcards.sample_id_pattern}.lock
        bash pipeline.sh --reference=supportFiles/Phila_NC_002942.fna --gff=supportFiles/NC_002942.gff --r1=$R1_FASTQ --r2=$R2_FASTQ --isolate={wildcards.sample_id_pattern} --output=./{wildcards.sample_id_pattern}_output
        
        if [ -f ./{wildcards.sample_id_pattern}_output/predict/$(basename {output}) ]; then
            mv ./{wildcards.sample_id_pattern}_output/predict/$(basename {output}) {output}
            mv ./{wildcards.sample_id_pattern}_output/ {config[output_directory]}{wildcards.sample_id_pattern}_legionella_serogroup_prediction/
        else
            touch {output}
        fi

        rm -r lpgenomics_temp/{wildcards.sample_id_pattern}.lock $R1_FASTQ $R2_FASTQ
        rmdir --ignore-fail-on-non-empty lpgenomics_temp/
        """
    

rule kleborate_kpneumoniae:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['kleborate_kpneumoniae_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_kleborate.tsv'
    shell: #generates blank output to avoid snakemake failing if typing goes wrong
        """
        mkdir -p ~/kleborate/
        cp {input.contigs} ~/kleborate/
        
        singularity run {input.sif_file} kleborate -o ~/kleborate/$(basename {output}) --kaptive -r -a ~/kleborate/$(basename {input.contigs})
        
        if [ -f ~/kleborate/$(basename {output}) ]; then
            mv ~/kleborate/$(basename {output}) {output}
        else
            touch {output}
        fi

        rm -r ~/kleborate/{wildcards.sample_id_pattern}* 2> /dev/null
        rmdir --ignore-fail-on-non-empty ~/kleborate/ 2> /dev/null
        """


rule agrvate_saureus:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['agrvate_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_agrvate_summary.tab'
    shell:
        """
        mkdir -p ~/agrvate/
        cp {input.contigs} ~/agrvate/
        cd ~/agrvate/
        
        singularity run {input.sif_file} agrvate -t -f -i ~/agrvate/$(basename {input.contigs})
        
        if [ -f ~/agrvate/{wildcards.sample_id_pattern}_contigs-results/{wildcards.sample_id_pattern}_contigs-summary.tab ]; then
            mv ~/agrvate/{wildcards.sample_id_pattern}_contigs-results/{wildcards.sample_id_pattern}_contigs-summary.tab {output}
        else
            touch {output}
        fi
        
        rm -r ~/agrvate/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/agrvate/
        """


rule spatyper_saureus:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['spatyper_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_spatyper.txt'
    shell:
        """
        mkdir -p ~/spatyper/
        cp {input.contigs} ~/spatyper/

        singularity run {input.sif_file} spaTyper -f ~/spatyper/$(basename {input.contigs}) --output ~/spatyper/$(basename {output})
        
        if [ -f ~/spatyper/$(basename {output}) ]; then
            mv ~/spatyper/$(basename {output})  {output}
        else
            touch {output}
        fi

        rm -r ~/spatyper/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/spatyper/
        """


rule sccmec_saureus:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['sccmec_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_sccmec.tsv'
    shell:
        """
        mkdir -p ~/sccmec/
        cp {input.contigs} ~/sccmec/
        
        singularity run {input.sif_file} staphopia-sccmec --assembly ~/sccmec/$(basename {input.contigs}) > ~/sccmec/$(basename {output})
        
        mv ~/sccmec/$(basename {output})  {output}
        rm -r ~/sccmec/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/sccmec/
        """


rule emmtyper_spyogenes:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['emmtyper_spyogenes_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_emmtyper.tsv'
    shell:
        """
        mkdir -p ~/emmtyper/
        cp {input.contigs} ~/emmtyper/
        
        singularity run {input.sif_file} emmtyper ~/emmtyper/$(basename {input.contigs}) -o ~/emmtyper/$(basename {output})
        
        if [ -f ~/emmtyper/$(basename {output}) ]; then
            mv ~/emmtyper/$(basename {output}) {output}
        else
            touch {output}
        fi

        rm -r ~/emmtyper/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/emmtyper/
        """


rule seqsero_senterica:
    input:
        read_1   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        sif_file = config['seqsero2_senterica_sif']
    threads:
        config['tip_tool_configs']['seqsero_senterica']['threads']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_SeqSero.tsv'
    shell:
        """
        mkdir -p ~/seqsero/
        cp {input.read_1} ~/seqsero/
        cp {input.read_2} ~/seqsero/
        
        singularity run {input.sif_file} SeqSero2_package.py -d ~/seqsero/{wildcards.sample_id_pattern} -n {wildcards.sample_id_pattern} -p {threads} -t 2 -i ~/seqsero/{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq.gz ~/seqsero/{wildcards.sample_id_pattern}_bact_reads_classified_2.fastq.gz
        
        if [ -f ~/seqsero/{wildcards.sample_id_pattern}/SeqSero_result.tsv ]; then
            mv ~/seqsero/{wildcards.sample_id_pattern}/SeqSero_result.tsv  {output}
        else
            touch {output}
        fi

        rm -r ~/seqsero/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/seqsero/
        """


rule sistr_senterica:
    input:
        contigs  = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['sistr_senterica_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_sistr.csv'
    shell:
        """
        mkdir -p ~/sistr/
        cp {input.contigs} ~/sistr/
        
        singularity run {input.sif_file} sistr --qc -f csv -o ~/sistr/$(basename {output}) ~/sistr/$(basename {input.contigs})
        
        if [ -f ~/sistr/$(basename {output}) ]; then
            mv ~/sistr/$(basename {output}) {output}
        else
            touch {output}
        fi

        rm -r ~/sistr/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/sistr/
        """


rule lissero_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['lissero_lmonocytogenes_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_lissero.tsv'
    shell:
        """
        mkdir -p ~/lissero/
        cp {input.contigs} ~/lissero/
        
        singularity run {input.sif_file} lissero ~/lissero/$(basename {input.contigs}) > ~/lissero/$(basename {output})
        
        mv ~/lissero/$(basename {output}) {output}
        rm -r ~/lissero/$(basename {input.contigs})
        rmdir --ignore-fail-on-non-empty ~/lissero/
        """


rule pasteur_pcr_serogroup_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_pasteur_pcr_serogroup.json'
    run: #typing via network can be done from nodes other than login node as it does not require job submission, only internet connection
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Listeria monocytogenes')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_lm_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Listeria monocytogenes', scheme_num=1)
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)         


rule pasteur_cgmlst_nmeningitidis:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Neisseria meningitidis')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_ngonorrhoeae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ng_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Neisseria gonorrhoeae', scheme_num=1)
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_kpneumoniae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_kp_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Klebsiella pneumoniae')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_sa_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Staphylococcus aureus')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_senterica:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_se_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Salmonella enterica')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_ecoli:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ec_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Escherichia coli')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_spneumoniae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_strp_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Streptococcus pneumoniae')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule pasteur_cgmlst_abaumanii:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ab_pasteur_cgmlst.json'
    run:
        filtered_contigs = input.contigs.replace("_contigs.fasta", "_filtered_contigs.fasta")
        hk.filter_contigs_length(input.contigs, filtered_contigs)
        api_output = hk.type_contigs_api(filtered_contigs, 'Acinetobacter baumanii', scheme_num=1)
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
            os.remove(filtered_contigs)
        else:
            os.system(f"touch {output[0]}")
            os.remove(filtered_contigs)


rule publmst_ngonorrhoe:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ngmast.json'
    run:
        api_output = hk.type_contigs_api(input.contigs, 'Neisseria gonorrhoeae')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
        else:
            os.system(f"touch {output[0]}")
        

rule pubmlst_abaumanii:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ab_pumblst.json'
    run:
        api_output = hk.type_contigs_api(input.contigs, 'Acinetobacter baumanii')
        if isinstance(api_output, dict):
            hk.write_json(api_output, output[0])
        else:
            os.system(f"touch {output[0]}")


rule ectyper_ecoli:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['ectyper_ecoli_sif']
    output:
        config['output_directory']+'{sample_id_pattern}_ectyper.tsv'
    envmodules:
        'singularity'
    shell:
        """
        mkdir -p ~/ectyper/
        cp {input.contigs} ~/ectyper/
        
        singularity run {input.sif_file} ectyper -i ~/ectyper/$(basename {input.contigs}) -o ~/ectyper/
        
        mv ~/ectyper/output.tsv {output}
        rm -r ~/ectyper/$(basename {input.contigs})
        rmdir --ignore-fail-on-non-empty ~/ectyper/
        """


rule stecfinder_ecoli:
    input:
        read_1   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        sif_file = config['stecfinder_ecoli_sif']
    output:
        result   = config['output_directory']+'{sample_id_pattern}_stecfinder.tsv'
    envmodules:
        'singularity'
    shell:
        """
        mkdir -p ~/stecfinder/
        cp {input.read_1} ~/stecfinder/
        cp {input.read_2} ~/stecfinder/
        
        singularity run {input.sif_file} stecfinder -r -i ~/stecfinder/{wildcards.sample_id_pattern}* --output ~/stecfinder/$(basename {output.result})
        
        mv ~/stecfinder/$(basename {output.result}) {output.result}
        rm -r ~/stecfinder/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/stecfinder/
        """


rule seroba_spneumoniae:
    input:
        read_1   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2   = config['work_dir']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        sif_file = config['seroba_spneumoniae_sif']
    output:
        config['output_directory']+'{sample_id_pattern}_seroba.tsv'
    envmodules:
        'singularity'
    shell: #final condition may be redundant
        """
        mkdir -p ~/seroba/
        cp -r {config[seroba_spneumoniae_database]} ~/db_seroba_{wildcards.sample_id_pattern}
        cp {input.read_1} ~/seroba/
        cp {input.read_2} ~/seroba/
        
        singularity run {input.sif_file} seroba runSerotyping --coverage 20 ~/db_seroba_{wildcards.sample_id_pattern} ~/seroba/$(basename {input.read_1}) ~/seroba/$(basename {input.read_2}) ~/seroba/{wildcards.sample_id_pattern}
        
        if [ -f ~/seroba/{wildcards.sample_id_pattern}/pred.tsv ]; then
            mv ~/seroba/{wildcards.sample_id_pattern}/pred.tsv {output}
        else
            touch {output}
        fi

        rm -r ~/seroba/{wildcards.sample_id_pattern}*
        rm -r ~/db_seroba_{wildcards.sample_id_pattern}\

        if [ -d ~/seroba/ ]; then
            rmdir --ignore-fail-on-non-empty ~/seroba/
        fi
        """


rule cgmlstfinder:
    input:
        image_file    = config['tip_tool_configs']['cgmlstfinder']['cgmlstfinder_sif'],
        contigs       = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        cgmlst_result = config['output_directory']+'{sample_id_pattern}_cgmlstfinder/data.json'
    run:
        os.system(f'''
        module load singularity
        CONTIG_FILENAME=$(basename {input.contigs})

        cd {config['databases']}
        cp {input.contigs} ~/
        mkdir -p ~/{wildcards.sample_id_pattern}_cgmlstfinder/

        singularity run {input.image_file} python /cgmlstfinder/cgMLST.py -db ./cgmlstfinder_db/ -i ~/$CONTIG_FILENAME -o ~/{wildcards.sample_id_pattern}_cgmlstfinder/ -s {cgmlst_species_map[wildcards.sample_id_pattern]}
        mv -n ~/{wildcards.sample_id_pattern}_cgmlstfinder/* {config['output_directory']}{wildcards.sample_id_pattern}_cgmlstfinder/

        rm -r ~/{wildcards.sample_id_pattern}_cgmlstfinder/ ~/$CONTIG_FILENAME
        ''')