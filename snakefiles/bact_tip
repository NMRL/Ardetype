localrules: all

#imports
import sys, pandas as pd, os, json
sys.path.insert(0, '/mnt/home/jevgen01/nmrl/bact_analysis/NMRL_Bact_Assembly_Inhouse')
from ardetype_utilities import type_contigs_api, write_json

#read sample sheet
os.chdir(config['home_dir'])
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")


#move input files to data folder
os.makedirs(config['work_dir'], exist_ok = True)
for sample_id, ctg, r1, r2, taxonomy in zip(sample_sheet['sample_id'], sample_sheet["fa"],sample_sheet['fq1'],sample_sheet['fq2'], sample_sheet['taxonomy']):
    os.system(f"[ -f {ctg} ] && mv -n {ctg} {config['work_dir']}")
    if taxonomy in ["Legionella pneumophila","Mycobacterium tuberculosis"]:
        os.system(f"[ -f $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_1.fastq.gz ] && mv -n $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_1.fastq.gz {config['work_dir']}")
        os.system(f"[ -f $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_2.fastq.gz ] && mv -n $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_2.fastq.gz {config['work_dir']}")

#define sample_id_pattern wildcard
sip_wild = config['work_dir']+'{sample_id_pattern}_contigs.fasta'

#AGGREGATION RULE
rule all:
    input: 
        config['tip_target_files']
    run:
        data_contents = os.listdir(config['work_dir'])
        for idx, id in enumerate(sample_sheet["sample_id"]):
            for file in data_contents:
                if id in file:
                    os.system(f"[ -f {config['work_dir']}{file} ] && mv {config['work_dir']}{file} {os.path.dirname(sample_sheet['fa'][idx])}")


rule hicap_hinfluenzae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['hicap_hinfluenzae_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_hicap.tsv'
    shell:
        """
        mkdir -p ~/hicap/
        cp {input.contigs} ~/hicap/
        singularity run {input.sif_file} hicap -q ~/hicap/$(basename {input.contigs}) -o ~/hicap/
        if [ -f ~/hicap/{wildcards.sample_id_pattern}.tsv ]; then
            mv ~/hicap/{wildcards.sample_id_pattern}.tsv {output}
        else
            touch {config[output_directory]}{wildcards.sample_id_pattern}_hicap.tsv
        fi
        rm -r ~/hicap/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/hicap/
        """


rule meningotype_nmeningitidis:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['meningotype_nmeningitidis_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_meningtotype.tsv'
    shell:
        """
        mkdir -p ~/meningotype/
        cp {input.contigs} ~/meningotype/
        singularity run {input.sif_file} meningotype ~/meningotype/$(basename {input.contigs}) > ~/meningotype/$(basename {output})
        mv ~/meningotype/$(basename {output}) {output}
        rm -r ~/meningotype/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/meningotype/
        """


rule legsta_lpneumophila:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['legsta_lpneumophila_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_legsta.csv'
    shell:
        """
        mkdir -p ~/legsta/
        cp {input.contigs} ~/legsta/
        singularity run {input.sif_file} legsta --csv ~/legsta/$(basename {input.contigs}) >> ~/legsta/$(basename {output})
        mv ~/legsta/$(basename {output}) {output}
        rm -r ~/legsta/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/legsta/
        """

rule lpgenomics_lpneumophila:
    input:
        read_1 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        repository = config['lpgenomics_repo'],
        pigz_sif = config['pigz_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+"{sample_id_pattern}-predictResults.txt"
    shell:
        """
        cd {input.repository}
        mkdir -p lpgenomics_temp/
        cp {input.read_1} lpgenomics_temp/
        cp {input.read_2} lpgenomics_temp/
        singularity run {input.pigz_sif} -d lpgenomics_temp/$(basename {input.read_1}) lpgenomics_temp/$(basename {input.read_2})
        R1_FASTQ=lpgenomics_temp/{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq
        R2_FASTQ=lpgenomics_temp/{wildcards.sample_id_pattern}_bact_reads_classified_2.fastq
        touch lpgenomics_temp/{wildcards.sample_id_pattern}.lock
        bash pipeline.sh --reference=supportFiles/Phila_NC_002942.fna --gff=supportFiles/NC_002942.gff --r1=$R1_FASTQ --r2=$R2_FASTQ --isolate={wildcards.sample_id_pattern} --output=./{wildcards.sample_id_pattern}_output
        if [ -f ./{wildcards.sample_id_pattern}_output/predict/$(basename {output}) ]; then
            mv ./{wildcards.sample_id_pattern}_output/predict/$(basename {output}) {output}
            mv ./{wildcards.sample_id_pattern}_output/ {config[output_directory]}{wildcards.sample_id_pattern}_legionella_seqrogroup_prediction/
        else
            touch {output}
        fi
        rm -r lpgenomics_temp/{wildcards.sample_id_pattern}.lock $R1_FASTQ $R2_FASTQ
        rmdir --ignore-fail-on-non-empty lpgenomics_temp/
        """
    

rule kleborate_kpneumoniae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['kleborate_kpneumoniae_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_kleborate.tsv'
    shell:
        """
        mkdir -p ~/kleborate/
        cp {input.contigs} ~/kleborate/
        singularity run {input.sif_file} kleborate -o ~/kleborate/$(basename {output}) -a ~/kleborate/$(basename {input.contigs})
        if [ -f ~/kleborate/$(basename {output}) ]; then
            mv ~/kleborate/$(basename {output}) {output}
        else
            touch {output}
        fi
        rm -r ~/kleborate/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/kleborate/
        """

    
rule agrvate_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['agrvate_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_agrvate_summary.tab'
    shell:
        """
        mkdir -p ~/agrvate/
        cp {input.contigs} ~/agrvate/
        cd ~/agrvate/
        singularity run {input.sif_file} agrvate -t -f -i ~/agrvate/$(basename {input.contigs})
        if [ -f ~/agrvate/{wildcards.sample_id_pattern}-results/{wildcards.sample_id_pattern}-summary.tab ]; then
            mv ~/agrvate/{wildcards.sample_id_pattern}-results/{wildcards.sample_id_pattern}-summary.tab {output}
        else
            touch {output}
        fi
        rm -r ~/agrvate/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/agrvate/
        """

rule spatyper_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['spatyper_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_spatyper.txt'
    shell:
        """
        mkdir -p ~/spatyper/
        cp {input.contigs} ~/spatyper/
        singularity run {input.sif_file} spaTyper -f ~/spatyper/$(basename {input.contigs}) --output ~/spatyper/$(basename {output})
        if [ -f ~/spatyper/$(basename {output}) ]; then
            mv ~/spatyper/$(basename {output})  {output}
        else
            touch {output}
        fi
        rm -r ~/spatyper/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/spatyper/
        """

    
rule sccmec_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['sccmec_saureus_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_sccmec.tsv'
    shell:
        """
        mkdir -p ~/sccmec/
        cp {input.contigs} ~/sccmec/
        singularity run {input.sif_file} staphopia-sccmec --assembly ~/sccmec/$(basename {input.contigs}) > ~/sccmec/$(basename {output})
        mv ~/sccmec/$(basename {output})  {output}
        rm -r ~/sccmec/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/sccmec/
        """

rule emmtyper_spyogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['emmtyper_spyogenes_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_emmtyper.tsv'
    shell:
        """
        mkdir -p ~/emmtyper/
        cp {input.contigs} ~/emmtyper/
        singularity run {input.sif_file} emmtyper ~/emmtyper/$(basename {input.contigs}) -o ~/emmtyper/$(basename {output})
        if [ -f ~/emmtyper/$(basename {output}) ]; then
            mv ~/emmtyper/$(basename {output}) {output}
        else
            touch {output}
        fi
        rm -r ~/emmtyper/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/emmtyper/
        """


rule seqsero_senterica:
    input:
        read_1 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        sif_file = config['seqsero2_senterica_sif']
    threads:
        config['tip_tool_configs']['seqsero_senterica']['threads']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_SeqSero.tsv'
    shell:
        """
        mkdir -p ~/seqsero/
        cp {input.read_1} ~/seqsero/
        cp {input.read_2} ~/seqsero/
        singularity run {input.sif_file} SeqSero2_package.py -d ~/seqsero/{wildcards.sample_id_pattern} -n {wildcards.sample_id_pattern} -p {threads} -t 2 -i ~/seqsero/{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq.gz ~/seqsero/{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq.gz
        if [ -f ~/seqsero/{wildcards.sample_id_pattern}/SeqSero_result.tsv ]; then
            mv ~/seqsero/{wildcards.sample_id_pattern}/SeqSero_result.tsv  {output}
        else
            touch {output}
        fi
        rm -r ~/seqsero/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/seqsero/
        """


rule sistr_senterica:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['sistr_senterica_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_sistr.csv'
    shell:
        """
        mkdir -p ~/sistr/
        cp {input.contigs} ~/sistr/
        singularity run {input.sif_file} sistr --qc -f csv -o ~/sistr/$(basename {output}) ~/sistr/$(basename {input.contigs})
        if [ -f ~/sistr/$(basename {output})]; then
            mv ~/sistr/$(basename {output}) {output}
        else
            touch {output}
        fi
        rm -r ~/sistr/{wildcards.sample_id_pattern}*
        rmdir --ignore-fail-on-non-empty ~/sistr/
        """

rule lissero_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta',
        sif_file = config['lissero_lmonocytogenes_sif']
    envmodules:
        'singularity'
    output:
        config['output_directory']+'{sample_id_pattern}_lissero.tsv'
    shell:
        """
        mkdir -p ~/lissero/
        cp {input.contigs} ~/lissero/
        singularity run {input.sif_file} lissero ~/lissero/$(basename {input.contigs}) > ~/lissero/$(basename {output})
        mv ~/lissero/$(basename {output}) {output}
        rm -r ~/lissero/$(basename {input.contigs})
        rmdir --ignore-fail-on-non-empty ~/lissero/
        """

rule pasteurmlst_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_pasteur_mlst.json'
    run:
        api_output = type_contigs_api(input.contigs, 'Listeria monocytogenes')
        if isinstance(api_output, dict):
            write_json(api_output, output[0])
        else:
            os.system(f"touch {output[0]}")

rule publmst_ngonorrhoe:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        config['output_directory']+'{sample_id_pattern}_ngmast.json'
    run:
        api_output = type_contigs_api(input.contigs, 'Neisseria gonorrhoeae')
        if isinstance(api_output, dict):
            write_json(api_output, output[0])
        else:
            os.system(f"touch {output[0]}")