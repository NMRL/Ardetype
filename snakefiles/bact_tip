localrules: all

#imports
sys.path.insert(0, '/mnt/home/jevgen01/nmrl/bact_analysis/NMRL_Bact_Assembly_Inhouse')
import pandas as pd, os
from ardetype_utilities import type_contigs_api

#read sample sheet
os.chdir(config['home_dir'])
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")


#move input files to data folder
os.makedirs(config['work_dir'], exist_ok = True)
for sample_id, ctg, r1, r2, taxonomy in zip(sample_sheet['sample_id'], sample_sheet["fa"],sample_sheet['fq1'],sample_sheet['fq2'], sample_sheet['taxonomy']):
    os.system(f"mv -n {ctg} {config['work_dir']}")
    if taxonomy in ["Legionella pneumophila","Mycobacterium tuberculosis"]:
        os.system(f"mv -n $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_1.fastq.gz {config['work_dir']}")
        os.system(f"mv -n $(realpath $(basename {ctg}))/{sample_id}_bact_reads_classified_2.fastq.gz {config['work_dir']}")

#define sample_id_pattern wildcard
sip_wild = config['work_dir']+'{sample_id_pattern}_contigs.fasta'

#aggregate_targets:
tip_targets = []
for bact in config['tip_target_files']: tip_targets += config['tip_target_files'][bact]

#AGGREGATION RULE
rule all:
    input: 
        tip_targets
    run:
        data_contents = os.listdir(config['work_dir'])
        for idx, id in enumerate(sample_sheet["sample_id"]):
            for file in data_contents:
                if id in file:
                    os.system(f"mv {config['work_dir']}{file} {os.path.dirname(sample_sheet['fa'][idx])}")


rule hicap_hinfluenzae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        outputs = expand(f"{work_dir}{hicap_output}", hicap_output = config['tip_target_files']["Haemophilus influenzae"])
    run:


rule meningotype_nmeningitidis:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        outputs = expand(f"{work_dir}{mtype_output}", mtype_output = config['tip_target_files']["Neisseria meningitidis"])
    run:


rule legsta_lpneumophila:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
        outputs = expand(f"{work_dir}{legsta_output}", legsta_output = config['tip_target_files']["Legionella pneumophila"])
    run:


rule lpgenomics_lpneumophila:
    input:
        read_1 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz'
    output:
    run:


rule mtbseq_mtuberculosis:
    input:
        read_1 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz'
    output:
    run:
    

rule kleborate_kpneumoniae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:
    

rule kaptive_kpneumoniae:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:

    
rule argvate_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:
    

rule spatyper_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:

    
rule sccmec_saureus:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:
    

rule emmtyper_spyogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:


rule seqsero_senterica:
    input:
        read_1 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz'
    output:
    run:


rule sistr_senterica:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:


rule pasteur_lmonocytogenes:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:
    run:
        #MLST typing through API:


rule publmst_ngonorrhoe:
    input:
        contigs = config['work_dir']+'{sample_id_pattern}_contigs.fasta'
    output:

    run:
        #
        #MLST typing through API:
            #read_taxonomy_information
            #run typing function
            #receive typing dict
            #validate typing dict
            #dump to json output file if valid
            #dump to json error file if not valid
            #