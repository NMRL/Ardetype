configfile: 'config_modular.yaml'

#imports
import pandas as pd, os

#read sample sheet
sample_sheet = pd.read_csv(f"{config['output_dir']}sample_sheet.csv", header=True)

#move input files to data folder
for r1, r2 in zip(sample_sheet["fq1"], sample_sheet["fq2"]):
    os.system(f"mv {r1} ../data/")
    os.system(f"mv {r2} ../data/")

#define sample_id_pattern wildcard
sip_wild = '../data/{sample_id_pattern}(_R[1,2]_001.fastq.gz|_[1,2].fastq.gz)"

#AGGREGATION RULE
rule all:
    input: 
        config["core_target_files"]
    shell:
        "echo Core finished"

#READ LENGTH & QUALITY TRIMMING
rule quality_control:
    input:
        sif_file = config['snakemake_sif'],
        read_1 = expand("{read_1}", read_1=sample_sheet['fq1']),
        read_2 = expand("{read_2}", read_2=sample_sheet['fq2'])
    threads: 4
    envmodules:
        'singularity'
    benchmark:
        temp('benchmarks/{sample_id_pattern}.fastp.benchmark.txt')
    output: 
        temp('{sample_id_pattern}.fastp.json'),
        temp('{sample_id_pattern}.fastp.html'),
        read_1_tr = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz'),
        read_2_tr = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz')
    shell:
        'singularity run {input.sif_file} fastp -j {wildcards.sample_id_pattern}.fastp.json -h {wildcards.sample_id_pattern}.fastp.html --in1 {input.read_1} --in2 {input.read_2} --out1 {output.read_1_tr} --out2 {output.read_2_tr} --thread {threads}'

#RUN KRAKEN2 TO FILTER OUT HOST CONTAMINATION
rule filter_host:
    input:
        #quality-trimmed reads
        read_1 = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz'),
        read_2 = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz')
        output_dir = config['output_directory']
    output:
        #host reads (temp)
        temp(f"{config['output_directory']}"+'{sample_id_pattern}_host_1.fastq'),
        temp(f"{config['output_directory']}"+'{sample_id_pattern}_host_2.fastq'),
        #sample reads 
        sample_1 = f"{config['output_directory']}"+'{sample_id_pattern}_sample_1.fastq.gz',
        sample_2 = f"{config['output_directory']}"+'{sample_id_pattern}_sample_2.fastq.gz',
        report_name = f"{config['output_directory']}"+'{sample_id_pattern}_contigs/{sample_id_pattern}_kraken2_host_filtering_report.txt'
    threads: 48
    conda:
        kraken2_env
    shell:
        """ 
        kraken2 --threads 48 --db /mnt/home/groups/nmrl/db/db-kraken2/human_reference/ --classified-out ../data/{wildcards.sample_id_pattern}_host#.fastq --unclassified-out {input.output_dir}{wildcards.sample_id_pattern}_sample#.fastq --report {output.report_name} --gzip-compressed --paired {input.read_1} {input.read_2}
        pigz ../data/{wildcards.sample_id_pattern}_sample_1.fastq
        pigz ../data/{wildcards.sample_id_pattern}_sample_2.fastq
        """

#GENERATING CONTIGS FROM READS
rule contig_assembly:
    input:
        sif_file = snakemake_sif,
        read_1 = f"{config['output_directory']}"+'{sample_id_pattern}_sample_1.fastq.gz',
        read_2 = f"{config['output_directory']}"+'{sample_id_pattern}_sample_2.fastq.gz'
        output_dir = config["output_directory"]
    output:
        temp(f"{config['output_directory']}"+'{sample_id_pattern}_contigs/contigs.fa')
    envmodules:
        'singularity'
    threads: 4
    benchmark:
        temp(f"{config['output_directory']}"+'benchmarks/{sample_id_pattern}.shovill.benchmark.txt')
    shell:
        'singularity run {input.sif_file} shovill --depth {config[core_tool_configs][shovill][depth]} --ram {config[core_tool_configs][shovill][ram]} --minlen {config[core_tool_configs][shovill][minlen]} --force --outdir {input.output_dir}{wildcards.sample_id_pattern}_contigs --R1 {input.read_1} --R2 {input.read_2}'


#RENAMING CONTINGS
rule contig_id:
    input:
        f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz',
        cnt = f'{config["output_directory"]}'+'{sample_id_pattern}_contigs/contigs.fa'
        output_dir = config["output_directory"]
    envmodules:
        'singularity'
    output:
        '{input.output_dir}{sample_id_pattern}_contigs/{sample_id_pattern}_contigs.fasta'
    shell:
        'mv {input.cnt} {output}'


#RUN KRAKEN2 TO CLASSIFY BACTERIAL READS USING INHOUSE-BUILT DATABASE
rule classify_reads:
    input:
        #quality-trimmed reads
        read_1 = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz',
        read_2 = f"{config['output_directory']}"+'{sample_id_pattern}_fastp.fastq.gz'
        output_dir = config["output_directory"]
    output:
        #classified reads
        f"{config['output_directory']}"+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        f"{config['output_directory']}"+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        #unclassified reads 
        f"{config['output_directory']}"+'{sample_id_pattern}_bact_reads_unclassified_1.fastq.gz',
        f"{config['output_directory']}"+'{sample_id_pattern}_bact_reads_unclassified_2.fastq.gz',
        report_name = f"{config['output_directory']}"+'{sample_id_pattern}_kraken2_reads_report.txt'
    threads: 48
    conda:
        kraken2_env
    shell:
        """ 
        kraken2 --threads 48 --db /mnt/home/groups/nmrl/db/db-kraken2/full_ref_bafp/ --classified-out {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_classified#.fastq --unclassified-out {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_unclassified#.fastq --report {output.report_name} --gzip-compressed --paired {input.read_1} {input.read_2}
        pigz {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq
        pigz {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_classified_2.fastq
        pigz {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_unclassified_1.fastq
        pigz {input.output_dir}{wildcards.sample_id_pattern}_bact_reads_unclassified_2.fastq
        """


#RUN KRAKEN2 TO CLASSIFY BACTERIAL CONTIGS USING INHOUSE-BUILT DATABASE
rule classify_contigs:
    input:
        #quality-trimmed reads
        contigs = f"{config['output_directory']}"+'{sample_id_pattern}_contigs/{sample_id_pattern}_contigs.fasta'
        output_dir = config["output_directory"]
    output:
        report_name = f"{config['output_directory']}"+'{sample_id_pattern}_kraken2_contigs_report.txt'
    threads: 48
    conda:
        kraken2_env
    shell:
        """ 
        kraken2 --threads 48 --db /mnt/home/groups/nmrl/db/db-kraken2/full_ref_bafp/ --report {output.report_name} {input.contigs}
        """