localrules: all, contig_id

#imports
import pandas as pd, os

#read sample sheet
os.chdir(config['home_dir'])
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")

#move input files to data folder
for i,r1 in enumerate(sample_sheet["fq1"]):
    os.system(f"mv -n {r1} {config['work_dir']}")
    os.system(f"mv -n {sample_sheet['fq2'][i]} {config['work_dir']}")

#define sample_id_pattern wildcard
sip_wild = config['work_dir']+'{sample_id_pattern}(_R[1,2]_001.fastq.gz|_[1,2].fastq.gz|*_R[1,2]_001_unclassified_out)'

#AGGREGATION RULE
rule all:
    input: 
        config["core_target_files"]
    run:
        data_contents = os.listdir(config['work_dir'])
        for idx, id in enumerate(sample_sheet["sample_id"]):
            for file in data_contents:
                if id in file:
                    os.system(f"mv {config['work_dir']}{file} {os.path.dirname(sample_sheet['fq1'][idx])}")
        os.mkdirs(config['work_dir'])

#READ LENGTH & QUALITY TRIMMING
rule quality_control:
    input:
        sif_file = config["snakemake_sif"],
        read_1 = config['work_dir']+'{sample_id_pattern}_R2_001.fastq.gz',
        read_2 = config['work_dir']+'{sample_id_pattern}_R2_001.fastq.gz'
    threads: 4
    envmodules:
        'singularity'
    output: 
        config['output_directory']+'{sample_id_pattern}.fastp.json',
        config['output_directory']+'{sample_id_pattern}.fastp.html',
        read_1_tr = temp(config['output_directory']+'{sample_id_pattern}_fastp_1.fastq.gz'),
        read_2_tr = temp(config['output_directory']+'{sample_id_pattern}_fastp_2.fastq.gz')
    shell:
        'singularity run {input.sif_file} fastp -j {config[output_directory]}{wildcards.sample_id_pattern}.fastp.json -h {config[output_directory]}{wildcards.sample_id_pattern}.fastp.html --in1 {input.read_1} --in2 {input.read_2} --out1 {output.read_1_tr} --out2 {output.read_2_tr} --thread {threads}'

#RUN KRAKEN2 TO FILTER OUT HOST CONTAMINATION
rule filter_host:
    input:
        #quality-trimmed reads
        read_1 = config['output_directory']+'{sample_id_pattern}_fastp_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_fastp_2.fastq.gz'
    output:
        #host reads (temp)
        temp(config['output_directory']+'{sample_id_pattern}_host_1.fastq'),
        temp(config['output_directory']+'{sample_id_pattern}_host_2.fastq'),
        #sample reads 
        sample_1 = temp(config['output_directory']+'{sample_id_pattern}_host_filtered_1.fastq.gz'),
        sample_2 = temp(config['output_directory']+'{sample_id_pattern}_host_filtered_2.fastq.gz'),
        report_name = config['output_directory']+'{sample_id_pattern}_kraken2_host_filtering_report.txt'
    threads: config["core_tool_configs"]["kraken2"]["threads"]
    conda:
        config["kraken2_env"]
    shell:
        """ 
        kraken2 --threads {threads} --db {config[core_tool_configs][kraken2][human_db]} --classified-out {config[output_directory]}{wildcards.sample_id_pattern}_host#.fastq --unclassified-out {config[output_directory]}{wildcards.sample_id_pattern}_host_filtered#.fastq --report {output.report_name} --gzip-compressed --paired {input.read_1} {input.read_2}
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_host_filtered_1.fastq
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_host_filtered_2.fastq
        """

#GENERATING CONTIGS FROM READS
rule contig_assembly:
    input:
        sif_file = config["snakemake_sif"],
        read_1 = config['output_directory']+'{sample_id_pattern}_host_filtered_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_host_filtered_2.fastq.gz',
    output:
        temp(config['output_directory']+'{sample_id_pattern}_contigs/contigs.fa')
    envmodules:
        'singularity'
    threads: 12
    shell:
        'singularity run {input.sif_file} shovill --depth {config[core_tool_configs][shovill][depth]} --ram {config[core_tool_configs][shovill][ram]} --minlen {config[core_tool_configs][shovill][minlen]} --force --outdir {config[output_directory]}{wildcards.sample_id_pattern}_contigs --R1 {input.read_1} --R2 {input.read_2}'


#RENAMING CONTINGS
rule contig_id:
    input:
        cnt = f'{config["output_directory"]}'+'{sample_id_pattern}_contigs/contigs.fa',
    envmodules:
        'singularity'
    output:
        contigs = config['output_directory']+'{sample_id_pattern}_contigs.fasta'
    shell:
        '''
        mv -n {input.cnt} {output.contigs}
        rm -r {config[output_directory]}{wildcards.sample_id_pattern}_contigs/
        '''


#RUN KRAKEN2 TO CLASSIFY BACTERIAL READS USING INHOUSE-BUILT DATABASE
rule classify_reads:
    input:
        #quality-trimmed, host-filtered reads
        sif_file = config["krona_sif"],
        read_1 = config['output_directory']+'{sample_id_pattern}_host_filtered_1.fastq.gz',
        read_2 = config['output_directory']+'{sample_id_pattern}_host_filtered_2.fastq.gz'
    output:
        #classified reads
        config['output_directory']+'{sample_id_pattern}_bact_reads_classified_1.fastq.gz',
        config['output_directory']+'{sample_id_pattern}_bact_reads_classified_2.fastq.gz',
        #unclassified reads 
        config['output_directory']+'{sample_id_pattern}_bact_reads_unclassified_1.fastq.gz',
        config['output_directory']+'{sample_id_pattern}_bact_reads_unclassified_2.fastq.gz',
        report_name = config['output_directory']+'{sample_id_pattern}_kraken2_reads_report.txt'
    threads: config["core_tool_configs"]["kraken2"]["threads"]
    envmodules:
        'singularity'
    conda:
        config["kraken2_env"]
    shell:
        """ 
        kraken2 --threads {threads} --db {config[core_tool_configs][kraken2][bact_db]} --classified-out {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_classified#.fastq --unclassified-out {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_unclassified#.fastq --report {output.report_name} --gzip-compressed --paired {input.read_1} {input.read_2}
        singularity run {input.sif_file} kreport2krona.py -r {output.report_name} -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_reads_report.krona
        singularity run {input.sif_file} ktImportText {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_reads_report.krona -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_reads_report.html
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_classified_1.fastq
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_classified_2.fastq
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_unclassified_1.fastq
        pigz {config[output_directory]}{wildcards.sample_id_pattern}_bact_reads_unclassified_2.fastq
        """


#RUN KRAKEN2 TO CLASSIFY BACTERIAL CONTIGS USING INHOUSE-BUILT DATABASE
rule classify_contigs:
    input:
        #quality-trimmed reads
        sif_file = config["krona_sif"],
        contigs = config['output_directory']+'{sample_id_pattern}_contigs.fasta'
    output:
        report_name = config['output_directory']+'{sample_id_pattern}_kraken2_contigs_report.txt'
    threads: config["core_tool_configs"]["kraken2"]["threads"]
    envmodules:
        'singularity'
    conda:
        config["kraken2_env"]
    shell:
        """ 
        kraken2 --threads {threads} --db {config[core_tool_configs][kraken2][bact_db]} --report {output.report_name} {input.contigs}
        singularity run {input.sif_file} kreport2krona.py -r {output.report_name} -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.krona
        singularity run {input.sif_file} ktImportText {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.krona -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.html
        """