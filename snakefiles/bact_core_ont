localrules: all


import sys, pandas as pd
sys.path.insert(0, os.path.abspath('./'))
from subscripts.ardetype_utilities import Ardetype_housekeeper as hk



sip_wild = config['work_dir']+'{sample_id_pattern}_ONT.fastq.gz'
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")
skip_circlator = True


def choose_assembly_branch(wildcards):
    if skip_circlator:
        return config['output_directory']+f'{wildcards.sample_id_pattern}.flyed.fasta'
    else:
        return config['output_directory']+f'{wildcards.sample_id_pattern}.circularized.fasta'


rule all:
    input: 
        config["core_target_files"],                                                                            #reads all expected outputs from config file                                                                                   
        k2c_list = expand(
            config['output_directory']+'{sample_id}_kraken2_contigs_report.txt', 
            sample_id=sample_sheet['sample_id']),                                                              #Creates a list of kraken contig reports to summarize taxonomy for all samples

        # list of all contig files in output
        contig_list = expand(
            config['output_directory']+'{sample_id}_contigs.fasta', 
            sample_id=sample_sheet['sample_id'])
    
    run:
        total_dict = {}
        for file in input.k2c_list:                                                                             #looping over reports
            df         = pd.read_table(file, header=None)[[0,3,5]]                                              #read columns
            df.columns = ['read_%','taxid','name']                                                              #rename 
            df         = df[df['taxid'] == "S"].reset_index(drop=True)                                          #extract only species rows
            top_hit    = df.loc[df["read_%"] ==df["read_%"].max()]['name'].reset_index(drop=True)[0].strip()    #extract top hit
            total_dict[
                os.path.basename(file).replace("_kraken2_contigs_report.txt","")                              
                ]      = top_hit                                                                                #save info for current samples
        with open(config['output_directory']+'core_aggregated_taxonomy.json', "w+") as json_handle:             #write top hit for each sample to json file
            json.dump(total_dict, json_handle, indent=4)
        
        
        #Aggregate kraken2 contig results
        kraken2contigs_summary = hk.aggregator(outfolder_path = config['output_directory'], proc_num = 6, extractor = hk.kraken2contigs_results, pathlist = input.k2c_list)
        kraken2contigs_summary.to_csv(f"{config['output_directory']}kraken2contigs_report.csv", header=True, index=False)
        
        #Creating copy of contigs in the species-specific folder
        # hk.copy_files_by_species(
        #     taxonomy_map = total_dict,
        #     file_list = input.contig_list,
        #     collection_path = config['contig_collection_path'],
        #     extension='contigs.fasta',
        #     batch_depth=1,
        # )
        print('bact_core finished')


rule ont_qc:
    input:
        sif_file = config["snikt_sif"],
        fastq = ancient(config['work_dir']+'{sample_id_pattern}_ONT.fastq.gz')
    output:
        config['output_directory']+'{sample_id_pattern}_snikt.html'
    params:
        s=config["core_tool_configs"]["snikt"]["sample_size"]
    envmodules:
        'singularity'
    shell:
        """
        singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} \
        {input.sif_file} snikt.R -s {params.s} --notrim {input.fastq} -o {wildcards.sample_id_pattern}_snikt -w {config[output_directory]}
        """

rule ont_filtering:
    input:
        sif_file = config["filtlong_sif"],
        fastq = config['work_dir']+'{sample_id_pattern}_ONT.fastq.gz'
    output:
        config['output_directory']+'{sample_id_pattern}_filtered.fastq.gz'
    params:
        keep_percent=config["core_tool_configs"]["filtlong"]["keep_percent"]
    envmodules:
        'singularity'
    shell:
        """
        singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} \
        {input.sif_file} filtlong --verbose --keep_percent {params.keep_percent} {input.fastq} | gzip > {output}
        """

rule ont_assembly:
    input:
        sif_file = config["flye_sif"],
        fastq = config['output_directory']+'{sample_id_pattern}_filtered.fastq.gz'
    output:
        config['output_directory']+'{sample_id_pattern}.flyed.fasta'
    params:
        threads=config["core_tool_configs"]["flye"]["threads"]
    envmodules:
        'singularity'
    shell:
        """
        folder_path={config[output_directory]}/{wildcards.sample_id_pattern}_flye
        if [ -d $folder_path ]; then
            rm -r {config[output_directory]}/{wildcards.sample_id_pattern}_flye
        fi
        mkdir -p {config[output_directory]}/{wildcards.sample_id_pattern}_flye
        singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} {input.sif_file} flye --nano-raw {input.fastq} --out-dir {config[output_directory]}/{wildcards.sample_id_pattern}_flye --threads {params.threads}
        cp {config[output_directory]}/{wildcards.sample_id_pattern}_flye/assembly.fasta {output}
        """

if not skip_circlator:
    rule circlator:
        input:
            sif_file = config["circlator_sif"],
            assembly = config['output_directory']+'{sample_id_pattern}.flyed.fasta',
            fastq = config['output_directory']+'{sample_id_pattern}_filtered.fastq.gz'
        output:
            config['output_directory']+'{sample_id_pattern}.circularized.fasta',
        envmodules:
            'singularity'
        shell:
            """
            folder_path={config[output_directory]}/{wildcards.sample_id_pattern}_circlator
            if [ -d $folder_path ]; then
                rm -r {config[output_directory]}/{wildcards.sample_id_pattern}_circlator
            fi
            singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} {input.sif_file} circlator all --assemble_spades_use_first {input.assembly} {input.fastq} {config[output_directory]}/{wildcards.sample_id_pattern}_circlator
            cp {config[output_directory]}/{wildcards.sample_id_pattern}_circlator/06.fixstart.fasta {output}
            """
else:
    rule circlator:
        input:
            sif_file = config["circlator_sif"],
            assembly = config['output_directory']+'{sample_id_pattern}.flyed.fasta',
            fastq = config['output_directory']+'{sample_id_pattern}_filtered.fastq.gz'
        output:
            config['output_directory']+'{sample_id_pattern}.circularized.fasta',
        envmodules:
            'singularity'
        shell:
            """
            touch {output}
            """

rule contig_id:
    input: 
        choose_assembly_branch
    output:
        contigs = config['output_directory']+'{sample_id_pattern}_contigs.fasta'
    shell:
        """
        cp {input} {output}
        """


rule classify_contigs:
    input:
        sif_file = ancient(config["krona_sif"]),
        contigs  = ancient(config['output_directory']+'{sample_id_pattern}_contigs.fasta')
    output:
        report_name    = config['output_directory']+'{sample_id_pattern}_kraken2_contigs_report.txt',
        filtering_data = temp(config['output_directory']+'{sample_id_pattern}_kraken2_contig_data.txt')
    threads: config["core_tool_configs"]["kraken2"]["threads"]
    envmodules:
        'singularity'
    conda:
        config["kraken2_env"]
    shell:
        """ 
        kraken2 --threads {threads} --db {config[core_tool_configs][kraken2][bact_db]} \
        --report {output.report_name} {input.contigs} > {output.filtering_data}

        singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} {input.sif_file} kreport2krona.py -r {output.report_name} \
        -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.krona

        singularity --silent exec --bind {config[output_directory]},{config[work_dir]}:{config[output_directory]},{config[work_dir]} {input.sif_file} ktImportText {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.krona \
        -o {config[output_directory]}{wildcards.sample_id_pattern}_kraken2_contigs_report.html
        """
