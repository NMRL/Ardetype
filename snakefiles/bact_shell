localrules: all

#imports
import pandas as pd, os

#read sample sheet
os.chdir('/mnt/home/groups/nmrl/bact_analysis/NMRL_Bact_Assembly_Inhouse/')
sample_sheet = pd.read_csv(f"{config['output_directory']}sample_sheet.csv")

#move input files to data folder
for ctg in sample_sheet["fa"]:
    os.system(f"mv -n {ctg} data/")

#define sample_id_pattern wildcard
sip_wild = 'data/{sample_id_pattern}_contigs.fasta'
ctg_series = sample_sheet['fa'].apply(lambda x: f"data/{os.path.basename(x)}")

#AGGREGATION RULE
rule all:
    input: 
        config['shell_target_files']
    run:
        data_contents = os.listdir("data/")
        for idx, id in enumerate(sample_sheet["sample_id"]):
            for file in data_contents:
                if id in file:
                    os.system(f"mv data/{file} {os.path.dirname(sample_sheet['fa'][idx])}")


#MOB-SUITE
#RESFINDER
#AMR++


#MLST
rule mlst: 
    input: 
        mlst_quast_path = config['mlst_quast_sif'],
        contigs = expand("{ctg}", ctg=ctg_series)
    output:
        mlst_output = config['output_directory']+'{sample_id_pattern}_mlst_output.csv',
    threads: 4
    envmodules:
        'singularity'
    shell:
        """
        singularity run {input.mlst_quast_path} mlst --csv {input.contigs} >> {output.mlst_output}
        """


#RGI
rule res_gen_id: 
    input: 
        contigs = expand("{ctg}", ctg=ctg_series)
    output:
        config['output_directory']+'{sample_id_pattern}.rgi.txt',
        config['output_directory']+'{sample_id_pattern}.rgi.json'
    threads: 4
    conda:
        config["rgi_env"]
    shell:
        """rgi main --input_sequence {input.contigs} --output_file {config[output_directory]}{wildcards.sample_id_pattern}.rgi --input_type contig --clean"""